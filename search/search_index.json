{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Febby Madrin's documentation For full documentation visit febbymadrin.github.io . This documentation is based on Jetson Nano Development kit Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Pycuda Niblack Tresholding OpenCV NVIDIA Courses","title":"Home"},{"location":"#welcome-to-febby-madrins-documentation","text":"For full documentation visit febbymadrin.github.io . This documentation is based on Jetson Nano Development kit","title":"Welcome to Febby Madrin's documentation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#pycuda","text":"","title":"Pycuda"},{"location":"#niblack-tresholding","text":"","title":"Niblack Tresholding"},{"location":"#opencv","text":"","title":"OpenCV"},{"location":"#nvidia-courses","text":"","title":"NVIDIA Courses"},{"location":"CUDA%20Programming/","text":"tztztgh CUDA Programming Environment used: C++, Pycuda Cross-Compiling, Host: 1 2 3 4 5 #include <stdion.h> int main (){ printf ( \"Hello Febby\" ); return 0 ; } Target: setting up the environment Simple how to install Numba you can try also on https://github.com/jefflgaol/Install-Packages-Jetson-ARM-Family sdsds sdsd how to monitoring the usage of jetson nano https://github.com/rbonghi/jetson_stats https://www.reddit.com/r/JetsonNano/comments/cheqwl/anything_better_than_tegrastats_or_jetsonstats/ https://www.youtube.com/watch?v=7HyKqm6DqnI","title":"CUDA"},{"location":"CUDA%20Programming/#tztztgh","text":"","title":"tztztgh"},{"location":"CUDA%20Programming/#cuda-programming","text":"Environment used: C++, Pycuda Cross-Compiling, Host: 1 2 3 4 5 #include <stdion.h> int main (){ printf ( \"Hello Febby\" ); return 0 ; } Target: setting up the environment","title":"CUDA Programming"},{"location":"CUDA%20Programming/#simple","text":"","title":"Simple"},{"location":"CUDA%20Programming/#how-to-install-numba","text":"you can try also on https://github.com/jefflgaol/Install-Packages-Jetson-ARM-Family sdsds sdsd how to monitoring the usage of jetson nano https://github.com/rbonghi/jetson_stats https://www.reddit.com/r/JetsonNano/comments/cheqwl/anything_better_than_tegrastats_or_jetsonstats/ https://www.youtube.com/watch?v=7HyKqm6DqnI","title":"how to install Numba"},{"location":"CV/","text":"Welcome to Febby Madrin's documentation For full documentation visit febbymadrin.github.io . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"CV"},{"location":"CV/#welcome-to-febby-madrins-documentation","text":"For full documentation visit febbymadrin.github.io .","title":"Welcome to Febby Madrin's documentation"},{"location":"CV/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"CV/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"NVIDIA%20Courses/","text":"Newtonbau : Jetson Nano _ Getting Started Prerequisites In order to be successful in this course, you will need the following: Hardware Jetson Nano Developer Kit Computer with Internet Access and SD card port microSD Memory Card (32GB UHS-I minimum) compatible 5V 4A Power Supply with 2.1mm DC barrel connector 2-pin jumper USB cable (Micro-B to Type-A) compatible USB webcam camera such as Logitech C270 Webcam The complete hardware kit is available from Sparkfun either with the Jetson Nano included or without the Jetson Nano included. Computer A computer with an internet connection and the ability to flash your microSD card An available USBA port on your computer (you may need an adapter if you only have USBC ports) Introduction Installation follow the instruction from xxx, but, would better to use this image Cross-Compiling Enviroment Cuda toolkit L4T run target via host-browser (USB and LAN) Jupyter activated Running example on Jetson Nano Running VisionWorks - SFM Sample Tips and Tricks join some free course from Nvidia Deep Learning Institut, as follows: Fundamental ... Deepstream ... Use Barrier to work with two monitor host and target, but with the same/one keyboard and mouse Useful link to follow: pysearchimage [jetsonhacks]: nvidia developer medium [cuda-tutorial.readthedocs.io]: https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/ \"readthedocs.io\" install spyder3 1 sudo apt-get install spyder3 install geany 1 sudo apt-get install geany opencv path configuration make new open cv, install sendiri, ikuti panduan nya dengan baik termasuk install opencv.contrib sekaligus https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html bisa membuat jetson nano hank, sebaiknya close semua app ?apakah openCV sudah terinstall di jetson nano? file Testing bisa","title":"Deep Learning Tutorial"},{"location":"NVIDIA%20Courses/#newtonbau-jetson-nano-_-getting-started","text":"","title":"Newtonbau : Jetson Nano _ Getting Started"},{"location":"NVIDIA%20Courses/#prerequisites","text":"In order to be successful in this course, you will need the following:","title":"Prerequisites"},{"location":"NVIDIA%20Courses/#hardware","text":"Jetson Nano Developer Kit Computer with Internet Access and SD card port microSD Memory Card (32GB UHS-I minimum) compatible 5V 4A Power Supply with 2.1mm DC barrel connector 2-pin jumper USB cable (Micro-B to Type-A) compatible USB webcam camera such as Logitech C270 Webcam The complete hardware kit is available from Sparkfun either with the Jetson Nano included or without the Jetson Nano included.","title":"Hardware"},{"location":"NVIDIA%20Courses/#computer","text":"A computer with an internet connection and the ability to flash your microSD card An available USBA port on your computer (you may need an adapter if you only have USBC ports)","title":"Computer"},{"location":"NVIDIA%20Courses/#introduction","text":"","title":"Introduction"},{"location":"NVIDIA%20Courses/#installation","text":"follow the instruction from xxx, but, would better to use this image","title":"Installation"},{"location":"NVIDIA%20Courses/#cross-compiling-enviroment","text":"","title":"Cross-Compiling Enviroment"},{"location":"NVIDIA%20Courses/#cuda-toolkit","text":"","title":"Cuda toolkit"},{"location":"NVIDIA%20Courses/#l4t","text":"run target via host-browser (USB and LAN) Jupyter activated","title":"L4T"},{"location":"NVIDIA%20Courses/#running-example-on-jetson-nano","text":"","title":"Running example on Jetson Nano"},{"location":"NVIDIA%20Courses/#running-visionworks-sfm-sample","text":"","title":"Running VisionWorks - SFM Sample"},{"location":"NVIDIA%20Courses/#tips-and-tricks","text":"join some free course from Nvidia Deep Learning Institut, as follows: Fundamental ... Deepstream ... Use Barrier to work with two monitor host and target, but with the same/one keyboard and mouse Useful link to follow: pysearchimage [jetsonhacks]: nvidia developer medium [cuda-tutorial.readthedocs.io]: https://cuda-tutorial.readthedocs.io/en/latest/tutorials/tutorial01/ \"readthedocs.io\" install spyder3 1 sudo apt-get install spyder3 install geany 1 sudo apt-get install geany opencv path configuration make new open cv, install sendiri, ikuti panduan nya dengan baik termasuk install opencv.contrib sekaligus https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html bisa membuat jetson nano hank, sebaiknya close semua app ?apakah openCV sudah terinstall di jetson nano? file Testing bisa","title":"Tips and Tricks"},{"location":"Niblack%20Binarization/","text":"What is binarization apa itu tresholding contoh sederhana Danger \"Reminder\" Remember to read the Usage Notes for information that may be relevant when using this extension! apa itu ninblack binarization berapa nilai k~ Image Binarization (Simple) c++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include \"opencv2/imgproc.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/highgui.hpp\" #include <iostream> using namespace cv ; using std :: cout ; int threshold_value = 0 ; int threshold_type = 3 ; int const max_value = 255 ; int const max_type = 4 ; int const max_binary_value = 255 ; Mat src , src_gray , dst ; const char * window_name = \"Threshold Demo\" ; const char * trackbar_type = \"Type: \\n 0: Binary \\n 1: Binary Inverted \\n 2: Truncate \\n 3: To Zero \\n 4: To Zero Inverted\" ; const char * trackbar_value = \"Value\" ; static void Threshold_Demo ( int , void * ) { /* 0: Binary 1: Binary Inverted 2: Threshold Truncated 3: Threshold to Zero 4: Threshold to Zero Inverted */ threshold ( src_gray , dst , threshold_value , max_binary_value , threshold_type ); imshow ( window_name , dst ); } int main ( int argc , char ** argv ) { String imageName ( \"stuff.jpg\" ); // by default if ( argc > 1 ) { imageName = argv [ 1 ]; } src = imread ( samples :: findFile ( imageName ), IMREAD_COLOR ); // Load an image if ( src . empty ()) { cout << \"Cannot read the image: \" << imageName << std :: endl ; return -1 ; } cvtColor ( src , src_gray , COLOR_BGR2GRAY ); // Convert the image to Gray namedWindow ( window_name , WINDOW_AUTOSIZE ); // Create a window to display results createTrackbar ( trackbar_type , window_name , & threshold_type , max_type , Threshold_Demo ); // Create a Trackbar to choose type of Threshold createTrackbar ( trackbar_value , window_name , & threshold_value , max_value , Threshold_Demo ); // Create a Trackbar to choose Threshold value Threshold_Demo ( 0 , 0 ); // Call the function to initialize waitKey (); return 0 ; } Video Binarization (Simple) C++ Python /home/dlinano/Downloads 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import cv2 def main (): windowName = [ 'Binary' , 'Binary Inv' , 'Zero' , 'Zero Inv' , 'Trunc' ] cap = cv2 . VideoCapture ( 0 ) if cap . isOpened (): ret , frame = cap . read () else : ret = False while ret : ret , frame = cap . read () th = 178 max_val = 255 ret , o1 = cv2 . threshold ( frame , th , max_val , cv2 . THRESH_BINARY ) # ret, o2 = cv2.threshold(frame, th, max_val, cv2.THRESH_BINARY_INV) # ret, o3 = cv2.threshold(frame, th, max_val, cv2.THRESH_TOZERO) # ret, o4 = cv2.threshold(frame, th, max_val, cv2.THRESH_TOZERO_INV) # ret, o5 = cv2.threshold(frame, th, max_val, cv2.THRESH_TRUNC) cv2 . imshow ( windowName [ 0 ], o1 ) # cv2.imshow(windowName[1], o2) # cv2.imshow(windowName[2], o3) # cv2.imshow(windowName[3], o4) # cv2.imshow(windowName[4], o5) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cv2 . destroyAllWindows () cap . release () if __name__ == \"__main__\" : main () Image Binarization (NiBlack mode) Video Binarization (NiBlack mode) - Febby","title":"Niblack Binarization"},{"location":"Niblack%20Binarization/#image-binarization-simple","text":"","title":"Image Binarization (Simple)"},{"location":"Niblack%20Binarization/#c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include \"opencv2/imgproc.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/highgui.hpp\" #include <iostream> using namespace cv ; using std :: cout ; int threshold_value = 0 ; int threshold_type = 3 ; int const max_value = 255 ; int const max_type = 4 ; int const max_binary_value = 255 ; Mat src , src_gray , dst ; const char * window_name = \"Threshold Demo\" ; const char * trackbar_type = \"Type: \\n 0: Binary \\n 1: Binary Inverted \\n 2: Truncate \\n 3: To Zero \\n 4: To Zero Inverted\" ; const char * trackbar_value = \"Value\" ; static void Threshold_Demo ( int , void * ) { /* 0: Binary 1: Binary Inverted 2: Threshold Truncated 3: Threshold to Zero 4: Threshold to Zero Inverted */ threshold ( src_gray , dst , threshold_value , max_binary_value , threshold_type ); imshow ( window_name , dst ); } int main ( int argc , char ** argv ) { String imageName ( \"stuff.jpg\" ); // by default if ( argc > 1 ) { imageName = argv [ 1 ]; } src = imread ( samples :: findFile ( imageName ), IMREAD_COLOR ); // Load an image if ( src . empty ()) { cout << \"Cannot read the image: \" << imageName << std :: endl ; return -1 ; } cvtColor ( src , src_gray , COLOR_BGR2GRAY ); // Convert the image to Gray namedWindow ( window_name , WINDOW_AUTOSIZE ); // Create a window to display results createTrackbar ( trackbar_type , window_name , & threshold_type , max_type , Threshold_Demo ); // Create a Trackbar to choose type of Threshold createTrackbar ( trackbar_value , window_name , & threshold_value , max_value , Threshold_Demo ); // Create a Trackbar to choose Threshold value Threshold_Demo ( 0 , 0 ); // Call the function to initialize waitKey (); return 0 ; }","title":"c++"},{"location":"Niblack%20Binarization/#video-binarization-simple","text":"","title":"Video Binarization (Simple)"},{"location":"Niblack%20Binarization/#c_1","text":"","title":"C++"},{"location":"Niblack%20Binarization/#python","text":"/home/dlinano/Downloads 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import cv2 def main (): windowName = [ 'Binary' , 'Binary Inv' , 'Zero' , 'Zero Inv' , 'Trunc' ] cap = cv2 . VideoCapture ( 0 ) if cap . isOpened (): ret , frame = cap . read () else : ret = False while ret : ret , frame = cap . read () th = 178 max_val = 255 ret , o1 = cv2 . threshold ( frame , th , max_val , cv2 . THRESH_BINARY ) # ret, o2 = cv2.threshold(frame, th, max_val, cv2.THRESH_BINARY_INV) # ret, o3 = cv2.threshold(frame, th, max_val, cv2.THRESH_TOZERO) # ret, o4 = cv2.threshold(frame, th, max_val, cv2.THRESH_TOZERO_INV) # ret, o5 = cv2.threshold(frame, th, max_val, cv2.THRESH_TRUNC) cv2 . imshow ( windowName [ 0 ], o1 ) # cv2.imshow(windowName[1], o2) # cv2.imshow(windowName[2], o3) # cv2.imshow(windowName[3], o4) # cv2.imshow(windowName[4], o5) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cv2 . destroyAllWindows () cap . release () if __name__ == \"__main__\" : main ()","title":"Python"},{"location":"Niblack%20Binarization/#image-binarization-niblack-mode","text":"","title":"Image Binarization (NiBlack mode)"},{"location":"Niblack%20Binarization/#video-binarization-niblack-mode-febby","text":"","title":"Video Binarization (NiBlack mode) - Febby"},{"location":"OpenCV%20Programming/","text":"The following steps have been tested for Ubuntu 10.04 but should work with other distros as well. Required Packages GCC 4.4.x or later CMake 2.8.7 or higher Git GTK+2.x or higher, including headers (libgtk2.0-dev) pkg-config Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) ffmpeg or libav development packages: libavcodec-dev, libavformat-dev, libswscale-dev [optional] libtbb2 libtbb-dev [optional] libdc1394 2.x [optional] libjpeg-dev, libpng-dev, libtiff-dev, libjasper-dev, libdc1394-22-dev [optional] CUDA Toolkit 6.5 or higher The packages can be installed using a terminal and the following commands or by using Synaptic Manager: [compiler] sudo apt-get install build-essential [required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev [optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev Getting OpenCV Source Code You can use the latest stable OpenCV version or you can grab the latest snapshot from our Git repository . Getting the Latest Stable OpenCV Version Go to our downloads page . Download the source archive and unpack it. Getting the Cutting-edge OpenCV from the Git Repository Launch Git client and clone OpenCV repository . If you need modules from OpenCV contrib repository then clone it as well. For example cd ~/ git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git Building OpenCV from Source Using CMake Create a temporary directory, which we denote as , where you want to put the generated Makefiles, project files as well the object files and output binaries and enter there. For example cd ~/opencv mkdir build cd build Configuring. Run cmake [ ] For example cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. or cmake-gui set full path to OpenCV source code, e.g. /home/user/opencv set full path to , e.g. /home/user/opencv/build set optional parameters run: ?Configure? run: ?Generate? Note Use cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. , without spaces after -D if the above example doesn't work. Description of some parameters build type: CMAKE_BUILD_TYPE=Release\\Debug to build with modules from opencv_contrib set OPENCV_EXTRA_MODULES_PATH to set BUILD_DOCS for building documents set BUILD_EXAMPLES to build all examples [optional] Building python. Set the following python parameters: PYTHON2(3)_EXECUTABLE = PYTHON_INCLUDE_DIR = /usr/include/python PYTHON_INCLUDE_DIR2 = /usr/include/x86_64-linux-gnu/python PYTHON_LIBRARY = /usr/lib/x86_64-linux-gnu/libpython .so PYTHON2(3)_NUMPY_INCLUDE_DIRS = /usr/lib/python /dist-packages/numpy/core/include/ [optional] Building java. Unset parameter: BUILD_SHARED_LIBS It is useful also to unset BUILD_EXAMPLES, BUILD_TESTS, BUILD_PERF_TESTS - as they all will be statically linked with OpenCV and can take a lot of memory. Build. From build directory execute make , it is recommended to do this in several threads For example make -j7 # runs 7 jobs in parallel [optional] Building documents. Enter and run make with target \"doxygen\" For example cd ~/opencv/build/doc/ make -j7 doxygen To install libraries, execute the following command from build directory sudo make install [optional] Running tests Get the required test data from OpenCV extra repository . For example git clone https://github.com/opencv/opencv_extra.git set OPENCV_TEST_DATA_PATH environment variable to . execute tests from build directory. For example /bin/opencv_test_core Note If the size of the created library is a critical issue (like in case of an Android build) you can use the install/strip command to get the smallest size possible. The stripped version appears to be twice as small. However, we do not recommend using this unless those extra megabytes do really matter. How to build OpenCV with extra modules You can build OpenCV, so it will include the modules from this repository. Contrib modules are under constant development and it is recommended to use them alongside the master branch or latest releases of OpenCV. Here is the CMake command for you: 1 2 3 $ cd <opencv_build_directory> $ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules <opencv_source_directory> $ make -j5 As the result, OpenCV will be built in the <opencv_build_directory> with all modules from opencv_contrib repository. If you don't want all of the modules, use CMake's BUILD_opencv_* options. Like in this example: 1 $ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules -DBUILD_opencv_legacy=OFF <opencv_source_directory> If you also want to build the samples from the \"samples\" folder of each module, also include the \"-DBUILD_EXAMPLES=ON\" option. If you prefer using the gui version of cmake (cmake-gui), then, you can add opencv_contrib modules within opencv core by doing the following: start cmake-gui select the opencv source code folder and the folder where binaries will be built (the 2 upper forms of the interface) press the configure button. you will see all the opencv build parameters in the central interface browse the parameters and look for the form called OPENCV_EXTRA_MODULES_PATH (use the search form to focus rapidly on it) complete this OPENCV_EXTRA_MODULES_PATH by the proper pathname to the <opencv_contrib>/modules value using its browse button. press the configure button followed by the generate button (the first time, you will be asked which makefile style to use) build the opencv core with the method you chose (make and make install if you chose Unix makefile at step 6) to run, linker flags to contrib modules will need to be added to use them in your code/IDE. For example to use the aruco module, \"-lopencv_aruco\" flag will be added. Update the repository documentation In order to keep a clean overview containing all contributed modules the following files need to be created/adapted. Update the README.md file under the modules folder. Here you add your model with a single line description. Add a README.md inside your own module folder. This README explains which functionality (separate functions) is available, links to the corresponding samples and explains in somewhat more detail what the module is expected to do. If any extra requirements are needed to build the module without problems, add them here also. -D OPENCV_GENERATE_PKGCONFIG=YES 1 sudo ldconfig -v sudo mv cv2.cpython-36m-x86_64-linux-gnu.so cv2.so daripada memakai CMAke, meiding pakai c++ contohnya pada pemakaaain g++ opencv_version.cpp $(pkg-config --cflags --libs opencv4) -o show_version g++ niblack_thresholding.cpp.o $(pkg-config --cflags --libs opencv4) -o show_version -lopencv_ximgproc","title":"OpenCV"},{"location":"OpenCV%20Programming/#required-packages","text":"GCC 4.4.x or later CMake 2.8.7 or higher Git GTK+2.x or higher, including headers (libgtk2.0-dev) pkg-config Python 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy) ffmpeg or libav development packages: libavcodec-dev, libavformat-dev, libswscale-dev [optional] libtbb2 libtbb-dev [optional] libdc1394 2.x [optional] libjpeg-dev, libpng-dev, libtiff-dev, libjasper-dev, libdc1394-22-dev [optional] CUDA Toolkit 6.5 or higher The packages can be installed using a terminal and the following commands or by using Synaptic Manager: [compiler] sudo apt-get install build-essential [required] sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev [optional] sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev","title":"Required Packages"},{"location":"OpenCV%20Programming/#getting-opencv-source-code","text":"You can use the latest stable OpenCV version or you can grab the latest snapshot from our Git repository .","title":"Getting OpenCV Source Code"},{"location":"OpenCV%20Programming/#getting-the-latest-stable-opencv-version","text":"Go to our downloads page . Download the source archive and unpack it.","title":"Getting the Latest Stable OpenCV Version"},{"location":"OpenCV%20Programming/#getting-the-cutting-edge-opencv-from-the-git-repository","text":"Launch Git client and clone OpenCV repository . If you need modules from OpenCV contrib repository then clone it as well. For example cd ~/ git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git","title":"Getting the Cutting-edge OpenCV from the Git Repository"},{"location":"OpenCV%20Programming/#building-opencv-from-source-using-cmake","text":"Create a temporary directory, which we denote as , where you want to put the generated Makefiles, project files as well the object files and output binaries and enter there. For example cd ~/opencv mkdir build cd build Configuring. Run cmake [ ] For example cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. or cmake-gui set full path to OpenCV source code, e.g. /home/user/opencv set full path to , e.g. /home/user/opencv/build set optional parameters run: ?Configure? run: ?Generate? Note Use cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. , without spaces after -D if the above example doesn't work. Description of some parameters build type: CMAKE_BUILD_TYPE=Release\\Debug to build with modules from opencv_contrib set OPENCV_EXTRA_MODULES_PATH to set BUILD_DOCS for building documents set BUILD_EXAMPLES to build all examples [optional] Building python. Set the following python parameters: PYTHON2(3)_EXECUTABLE = PYTHON_INCLUDE_DIR = /usr/include/python PYTHON_INCLUDE_DIR2 = /usr/include/x86_64-linux-gnu/python PYTHON_LIBRARY = /usr/lib/x86_64-linux-gnu/libpython .so PYTHON2(3)_NUMPY_INCLUDE_DIRS = /usr/lib/python /dist-packages/numpy/core/include/ [optional] Building java. Unset parameter: BUILD_SHARED_LIBS It is useful also to unset BUILD_EXAMPLES, BUILD_TESTS, BUILD_PERF_TESTS - as they all will be statically linked with OpenCV and can take a lot of memory. Build. From build directory execute make , it is recommended to do this in several threads For example make -j7 # runs 7 jobs in parallel [optional] Building documents. Enter and run make with target \"doxygen\" For example cd ~/opencv/build/doc/ make -j7 doxygen To install libraries, execute the following command from build directory sudo make install [optional] Running tests Get the required test data from OpenCV extra repository . For example git clone https://github.com/opencv/opencv_extra.git set OPENCV_TEST_DATA_PATH environment variable to . execute tests from build directory. For example /bin/opencv_test_core Note If the size of the created library is a critical issue (like in case of an Android build) you can use the install/strip command to get the smallest size possible. The stripped version appears to be twice as small. However, we do not recommend using this unless those extra megabytes do really matter.","title":"Building OpenCV from Source Using CMake"},{"location":"OpenCV%20Programming/#how-to-build-opencv-with-extra-modules","text":"You can build OpenCV, so it will include the modules from this repository. Contrib modules are under constant development and it is recommended to use them alongside the master branch or latest releases of OpenCV. Here is the CMake command for you: 1 2 3 $ cd <opencv_build_directory> $ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules <opencv_source_directory> $ make -j5 As the result, OpenCV will be built in the <opencv_build_directory> with all modules from opencv_contrib repository. If you don't want all of the modules, use CMake's BUILD_opencv_* options. Like in this example: 1 $ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules -DBUILD_opencv_legacy=OFF <opencv_source_directory> If you also want to build the samples from the \"samples\" folder of each module, also include the \"-DBUILD_EXAMPLES=ON\" option. If you prefer using the gui version of cmake (cmake-gui), then, you can add opencv_contrib modules within opencv core by doing the following: start cmake-gui select the opencv source code folder and the folder where binaries will be built (the 2 upper forms of the interface) press the configure button. you will see all the opencv build parameters in the central interface browse the parameters and look for the form called OPENCV_EXTRA_MODULES_PATH (use the search form to focus rapidly on it) complete this OPENCV_EXTRA_MODULES_PATH by the proper pathname to the <opencv_contrib>/modules value using its browse button. press the configure button followed by the generate button (the first time, you will be asked which makefile style to use) build the opencv core with the method you chose (make and make install if you chose Unix makefile at step 6) to run, linker flags to contrib modules will need to be added to use them in your code/IDE. For example to use the aruco module, \"-lopencv_aruco\" flag will be added.","title":"How to build OpenCV with extra modules"},{"location":"OpenCV%20Programming/#update-the-repository-documentation","text":"In order to keep a clean overview containing all contributed modules the following files need to be created/adapted. Update the README.md file under the modules folder. Here you add your model with a single line description. Add a README.md inside your own module folder. This README explains which functionality (separate functions) is available, links to the corresponding samples and explains in somewhat more detail what the module is expected to do. If any extra requirements are needed to build the module without problems, add them here also. -D OPENCV_GENERATE_PKGCONFIG=YES 1 sudo ldconfig -v sudo mv cv2.cpython-36m-x86_64-linux-gnu.so cv2.so daripada memakai CMAke, meiding pakai c++ contohnya pada pemakaaain g++ opencv_version.cpp $(pkg-config --cflags --libs opencv4) -o show_version g++ niblack_thresholding.cpp.o $(pkg-config --cflags --libs opencv4) -o show_version -lopencv_ximgproc","title":"Update the repository documentation"},{"location":"Setup%20and%20Troubleshoots/","text":"Problem 1: Libegl-mecha0 , unmet dependencies error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -desktop:~ sudo apt-get install libegl-mesa0 Reading package lists... Done Building dependency tree Reading state information... Done libegl-mesa0 is already the newest version ( 19 .2.8-0ubuntu0~18.04.3 ) . libegl-mesa0 set to manually installed. You might want to run 'apt --fix-broken install' to correct these. The following packages have unmet dependencies: libegl1:armhf : Depends: libegl-mesa0:armhf but it is not going to be installed E: Unmet dependencies. Try 'apt --fix-broken install' with no packages ( or specify a solution ) . -desktop:~ sudo apt-get install nano Reading package lists? Done Building dependency tree Reading state information? Done You might want to run ?apt --fix-broken install? to correct these. The following packages have unmet dependencies: libegl1:armhf : Depends: libegl-mesa0:armhf but it is not going to be installed E: Unmet dependencies. Try ?apt --fix-broken install? with no packages ( or specify a solution ) . -desktop:~$ sudo apt --fix-broken install Reading package lists? Done Building dependency tree Reading state information? Done Correcting dependencies? Done The following packages were automatically installed and are no longer required: iio-sensor-proxy:armhf libavahi-glib1:armhf libmbim-glib4 libmbim-glib4:armhf libmbim-proxy libmm-glib0:armhf libpolkit-gobject-1-0:armhf libqmi-glib5 libqmi-glib5:armhf libqmi-proxy modemmanager:armhf usb-modeswitch usb-modeswitch-data Use ?sudo apt autoremove? to remove them. The following additional packages will be installed: libegl-mesa0:armhf The following NEW packages will be installed: libegl-mesa0:armhf 0 upgraded, 1 newly installed, 0 to remove and 13 not upgraded. 183 not fully installed or removed. Need to get 0 B/76.6 kB of archives. After this operation, 240 kB of additional disk space will be used. Do you want to continue ? [ Y/n ] Y debconf: delaying package configuration, since apt-utils is not installed ( Reading database ? 138736 files and directories currently installed. ) Preparing to unpack ?/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb ? Unpacking libegl-mesa0:armhf ( 19 .2.8-0ubuntu0~18.04.3 ) ? dpkg: error processing archive /var/cache/apt/archives/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb ( ?unpack ) : trying to overwrite shared ?/usr/share/glvnd/egl_vendor.d/50_mesa.json?, which is different from other instances of package libegl-mesa0:armhf Errors were encountered while processing: /var/cache/apt/archives/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb E: Sub-process /usr/bin/dpkg returned an error code ( 1 ) solution : 1 2 3 4 -desktop:/usr/share/glvnd/egl_vendor.d$ sudo mv 50_mesa.json 50_mesa-old.json then ran fix install -desktop:/usr/share/glvnd/egl_vendor.d$ sudo apt ? fix-broken install ] https://medium.com/@hmurari/how-to-install-teamviewer-on-a-jetson-nano-38080f87f039 Problem 2: opencv_contrib installation","title":"Setup & Troubleshoot"},{"location":"Setup%20and%20Troubleshoots/#problem-1-libegl-mecha0-unmet-dependencies-error","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -desktop:~ sudo apt-get install libegl-mesa0 Reading package lists... Done Building dependency tree Reading state information... Done libegl-mesa0 is already the newest version ( 19 .2.8-0ubuntu0~18.04.3 ) . libegl-mesa0 set to manually installed. You might want to run 'apt --fix-broken install' to correct these. The following packages have unmet dependencies: libegl1:armhf : Depends: libegl-mesa0:armhf but it is not going to be installed E: Unmet dependencies. Try 'apt --fix-broken install' with no packages ( or specify a solution ) . -desktop:~ sudo apt-get install nano Reading package lists? Done Building dependency tree Reading state information? Done You might want to run ?apt --fix-broken install? to correct these. The following packages have unmet dependencies: libegl1:armhf : Depends: libegl-mesa0:armhf but it is not going to be installed E: Unmet dependencies. Try ?apt --fix-broken install? with no packages ( or specify a solution ) . -desktop:~$ sudo apt --fix-broken install Reading package lists? Done Building dependency tree Reading state information? Done Correcting dependencies? Done The following packages were automatically installed and are no longer required: iio-sensor-proxy:armhf libavahi-glib1:armhf libmbim-glib4 libmbim-glib4:armhf libmbim-proxy libmm-glib0:armhf libpolkit-gobject-1-0:armhf libqmi-glib5 libqmi-glib5:armhf libqmi-proxy modemmanager:armhf usb-modeswitch usb-modeswitch-data Use ?sudo apt autoremove? to remove them. The following additional packages will be installed: libegl-mesa0:armhf The following NEW packages will be installed: libegl-mesa0:armhf 0 upgraded, 1 newly installed, 0 to remove and 13 not upgraded. 183 not fully installed or removed. Need to get 0 B/76.6 kB of archives. After this operation, 240 kB of additional disk space will be used. Do you want to continue ? [ Y/n ] Y debconf: delaying package configuration, since apt-utils is not installed ( Reading database ? 138736 files and directories currently installed. ) Preparing to unpack ?/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb ? Unpacking libegl-mesa0:armhf ( 19 .2.8-0ubuntu0~18.04.3 ) ? dpkg: error processing archive /var/cache/apt/archives/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb ( ?unpack ) : trying to overwrite shared ?/usr/share/glvnd/egl_vendor.d/50_mesa.json?, which is different from other instances of package libegl-mesa0:armhf Errors were encountered while processing: /var/cache/apt/archives/libegl-mesa0_19.2.8-0ubuntu0~18.04.3_armhf.deb E: Sub-process /usr/bin/dpkg returned an error code ( 1 ) solution : 1 2 3 4 -desktop:/usr/share/glvnd/egl_vendor.d$ sudo mv 50_mesa.json 50_mesa-old.json then ran fix install -desktop:/usr/share/glvnd/egl_vendor.d$ sudo apt ? fix-broken install ] https://medium.com/@hmurari/how-to-install-teamviewer-on-a-jetson-nano-38080f87f039","title":"Problem 1: Libegl-mecha0 , unmet dependencies error"},{"location":"Setup%20and%20Troubleshoots/#problem-2-opencv_contrib-installation","text":"","title":"Problem 2: opencv_contrib installation"},{"location":"Tips%20n%20Tricks/","text":"Tips n Tricks For full documentation visit febbymadrin.github.io . https://commonmark.org/help/tutorial/index.html","title":"Tips & Tricks"},{"location":"Tips%20n%20Tricks/#tips-n-tricks","text":"For full documentation visit febbymadrin.github.io . https://commonmark.org/help/tutorial/index.html","title":"Tips n Tricks"},{"location":"about/","text":"","title":"About"}]}